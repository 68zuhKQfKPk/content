import json
from pathlib import Path

from MalwareFindingsToTable import Result, get_findings, findings_to_command_results

TEST_DATA_DIR = Path(__file__).parent / 'test_data'


def _load_test_file(file_name: str):
    return json.loads((TEST_DATA_DIR / file_name).read_text())


def _dump_test_file(file_name: str, content: dict):
    (TEST_DATA_DIR / file_name).write_text(json.dumps(content))


def test_empty_context():
    context = {}
    findings = get_findings(context)
    result = findings_to_command_results(findings)
    assert not result.outputs
    assert result.readable_output == '**No entries.**\n'


def test_get_summary():
    name_0 = 'name0'
    status_0 = Result.UNKNOWN.value
    tactic_0 = 'tactic0'

    name_1 = 'name1'
    status_1 = Result.SUSPICIOUS.value

    raw_findings = {
        name_0: {
            'Tactic': tactic_0,
            'Result': status_0,
            'Sources': {'foo'}
        },
        name_1: {
            'Tactic': 'tactic',
            'Result': status_1,
            'Sources': {'foo', 'bar'}
        },
        'Missing data test': {
        }
    }

    findings = get_findings(raw_findings)
    assert len(findings) == len(raw_findings)
    assert findings[0].name == name_0
    assert findings[0].result == Result(status_0)
    assert findings[0].tactic == tactic_0

    assert findings[1].name == name_1
    assert findings[1].result == Result(status_1)

    assert findings[2].result == Result.UNKNOWN
    assert findings[2].tactic == "Missing data test (missing tactic value)"

    assert findings_to_command_results(findings).to_context()['EntryContext'] == \
           _load_test_file('expected_context.json')
