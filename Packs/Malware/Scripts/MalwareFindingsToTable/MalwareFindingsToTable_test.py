import json
from pathlib import Path

from FindingsToTable import Status, get_findings, findings_to_command_results

TEST_DATA_DIR = Path(__file__).parent / 'test_data'


def _load_test_file(file_name: str):
    return json.loads((TEST_DATA_DIR / file_name).read_text())


def test_empty_context():
    context = {}
    findings = get_findings(context)
    result = findings_to_command_results(findings)
    assert not result.outputs
    assert result.readable_output is None


def test_get_summary():
    name_0 = 'Passover'
    status_0 = Status.NOT_DETECTED.value
    question_0 = 'Why is this night different from all the other nights?'

    name_1 = 'Haddaway'
    status_1 = Status.SUSPICIOUS.value

    raw_findings = {
        name_0: {
            'Question': question_0,
            'Status': status_0,
            'Sources': {'foo'}
        },
        name_1: {
            'Question': 'What is love?',
            'Status': status_1,
            'Sources': {'foo', 'bar'}
        },
        'Missing data test': {
        }
    }

    findings = get_findings(raw_findings)
    assert len(findings) == len(raw_findings)
    assert findings[0].name == name_0
    assert findings[0].status == Status(status_0)
    assert findings[0].question == question_0

    assert findings[1].name == name_1
    assert findings[1].status == Status(status_1)

    assert findings[2].status == Status.UNKNOWN
    assert findings[2].question == "Missing data test (missing question value)"
    assert findings_to_command_results(findings).to_context()['EntryContext'] == _load_test_file('expected_context.json')
