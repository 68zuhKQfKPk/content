import demistomock as demisto

import traceback
from abc import ABC, abstractmethod
from enum import Enum
from typing import Optional, Dict, Set, Union

try:
    from CommonServerPython import ThreatIntel, argToBoolean, CommandResults, return_results, return_error
except:  # todo remove
    print("XSOAR")
    pass

SUPPORTED_HASHES = 'SHA256', 'SHA512', 'SHA1', 'MD5'
CONTEXT_FINDING_PREFIX = 'MalwareFinding.ContextFinding'
FILE_FINDING_PREFIX = 'MalwareFinding.FileFinding'


class Status(Enum):
    SUSPICIOUS = 2
    BENIGN = 1
    UNKNOWN = 0


class Source(Enum):
    SANDBOX = 'Sandbox'
    EDR = 'EDR'


class MalwareFinding(ABC):
    name: str
    context: dict
    question: Optional[str]
    status: Optional[Status]
    sources: Set[Source]
    additional_attributes: Optional[Dict[str, str]]

    def __init__(self, name: str, context: dict, question: Optional[str] = None):
        """
        Represents a query to the context.
        :param name: Name of the query
        :param context: Context to search in.
        :param question: The question this query answers, as it's shown to the user.
        """
        self.name = name
        self.context = context
        self.question = question
        self.status = Status.UNKNOWN  # default
        self.sources = set()
        self.additional_attributes = None

        self._parse_context()

    def to_context(self, include_hashes: bool) -> dict:
        """
        Creates a context section from the finding.
        :param include_hashes: whether to include the hashes related to this file in the context.
        Use `False` when creating context for aggregated results (max of findings)
        :return: a dictionary to be used as CommandResult.output.
        """
        context = {}

        if self.sources:
            # sources are not always defined, e.g. in Verdict.
            # sorting keeps results deterministic.
            context['Sources'] = sorted([source.value for source in self.sources])

        if self.question:
            context['Question'] = self.question

        if self.status:
            context['Status'] = self.status.name.title()  # e.g. Benign rather than BENIGN

        if include_hashes:
            for hash_name in sorted(SUPPORTED_HASHES):
                if hash_value := self.context.get(hash_name):
                    context[hash_name] = hash_value

        if self.additional_attributes:
            context |= self.additional_attributes

        return context

    def _parse_key(self, key: str, expected_value: Union[str, bool], status: Status, source: Source):
        value = demisto.get(self.context, key)

        if isinstance(expected_value, bool):
            try:
                value = argToBoolean(value)
            except ValueError:
                # todo check this makes sense
                return  # if a value can't be converted to bool, it is definitely not the expected bool one

        if value == expected_value:
            self.status = status
            self.sources.add(source)

    @abstractmethod
    def _parse_context(self) -> None:
        """
        Determines all class attribute values (status, sources, etc.) from the context.
        Naturally, this is customized in each inheriting class.
        """
        raise NotImplemented(f'Missing implementation of _parse_context() for {self.name}')


class KillChain(MalwareFinding, ABC):
    def __init__(self, name: str, question: str, context: dict, search_value: str):
        self.search_value = search_value
        super().__init__(name=name, question=question, context=context)  # calls self._parse_context

    def _parse_context(self) -> None:
        self._parse_key('csfalconx.resource.sandbox.mitre_attacks.tactic',
                        self.search_value, Status.SUSPICIOUS, Source.SANDBOX)
        self._parse_key('incident.tacticname', self.search_value, Status.SUSPICIOUS, Source.EDR)
        self._parse_key('AttackPattern.KillChainPhases', self.search_value, Status.SUSPICIOUS, Source.EDR)


class Persistence(KillChain):
    def __init__(self, context: dict):
        super().__init__(
            name='EvidenceOfPersistence',
            question='Is there evidence of Persistence?',
            context=context,
            search_value=ThreatIntel.KillChainPhases.PERSISTENCE
        )


class DefenseEvasion(KillChain):
    def __init__(self, context: dict):
        super().__init__(
            name='EvidenceOfDefenseEvasion',
            question='Is there evidence of Defense Evasion?',
            context=context,
            search_value=ThreatIntel.KillChainPhases.DEFENSE_EVASION
        )


class Execution(KillChain):
    def __init__(self, context: dict):
        super().__init__(
            name='EvidenceOfExecution',
            question='Is there evidence of Execution?',
            context=context,
            search_value=ThreatIntel.KillChainPhases.EXECUTION
        )


class LateralMovement(KillChain):
    def __init__(self, context: dict):
        super().__init__(
            name='EvidenceOfLateralMovement',
            question='Is there evidence of Lateral Movement?',
            context=context,
            search_value=ThreatIntel.KillChainPhases.LATERAL_MOVEMENT
        )


class PrivilegeEscalation(KillChain):
    def __init__(self, context: dict):
        super().__init__(
            name='EvidenceOfPrivilegeEscalation',
            question='Is there evidence of Privilege Escalation?',
            context=context,
            search_value=ThreatIntel.KillChainPhases.PRIVILEGE_ESCALATION
        )


class CommandAndControl(KillChain):
    def __init__(self, context: dict):
        super().__init__(
            name='EvidenceOfCommandAndControl',
            question='Is there evidence of Command and Control?',
            context=context,
            search_value=ThreatIntel.KillChainPhases.COMMAND_AND_CONTROL
        )


class FileSignature(MalwareFinding):
    def _parse_context(self) -> None:
        # todo use self.hash_value
        self.additional_attributes = {}
        self.status = Status.SUSPICIOUS  # default

        # MSDE
        self._parse_key('MicrosoftATP.File.IsValidCertificate', True, Status.BENIGN, Source.EDR)

        if signer := demisto.get(self.context, 'MicrosoftATP.File.Signer'):
            self.additional_attributes['Signer'] = signer
            self.sources.add(Source.EDR)

        # WildFire
        elif publisher := demisto.get(self.context, 'File.DigitalSignature.Publisher'):  # todo wildfire
            self.status = Status.BENIGN
            self.additional_attributes['Signer'] = publisher
            self.sources.add(Source.SANDBOX)

    def __init__(self, context: dict, hash_key: str, hash_value: str):
        self.hash_key = hash_key  # e.g. SHA256
        self.hash_value = hash_value
        super().__init__(name='FileDigitalSignature',
                         question='Is the file digitally signed?',
                         context=context)


class Verdict(MalwareFinding):
    def _parse_context(self) -> None:
        for dbot_score in self.context.get('DBotScore', []):
            if dbot_score.get('indicator') == self.hash_value:
                self.value = dbot_score.get('Score', '0')  # todo value or status?
                # todo source: parse? use name as is?
                break
        else:
            demisto.debug(f'Could not find DBotScore for {self.hash_value}')

    def __init__(self, context: dict, hash_key: str, hash_value: str):
        self.hash_key = hash_key  # e.g. SHA256
        self.hash_value = hash_value
        self.additional_attributes = {self.hash_key: self.hash_value}
        super().__init__(name='SandboxVerdict', question='Sandbox Verdict', context=context)


def parse_context(context: dict) -> list[CommandResults]:
    return [CommandResults(outputs_prefix=f'{CONTEXT_FINDING_PREFIX}.{finding.name}',
                           outputs=finding.to_context(include_hashes=False))
            for finding in (
                Persistence(context),
                DefenseEvasion(context),
                Execution(context),
                LateralMovement(context),
                PrivilegeEscalation(context),
                CommandAndControl(context),
            )
            ]


def create_file_findings(context: dict) -> dict[str, list[MalwareFinding]]:
    findings = {
        'FileSignature': [],
        'Verdict': [],
    }

    for file_entry in context.get('File', []):
        for hash_key in SUPPORTED_HASHES:
            if hash_value := context.get(hash_key):
                findings['FileSignature'].append(FileSignature(context, hash_key, hash_value))
                findings['Verdict'].append(Verdict(context, hash_key, hash_value))
            break
        else:
            # todo ignore? is it even possible to have a file indicator without any of the above?
            demisto.debug(f'Could not find hash for file {file_entry}')

    return findings


def parse_files(context: dict) -> list[CommandResults]:
    findings: dict[str, list[MalwareFinding]] = create_file_findings(context)  # {'Verdict': [...]}
    file_finding_results: list[CommandResults] = []

    for finding_type, findings_ in findings.items():
        for finding in findings_:
            file_finding_results.append(CommandResults(outputs_prefix=f'{FILE_FINDING_PREFIX}.{finding.name}',
                                                       outputs=finding.to_context(include_hashes=True),
                                                       outputs_key_field=finding.hash_key))

    max_findings = []

    if verdicts := findings.get('Verdict'):
        max_findings.append(max(verdicts, key=lambda _: _.value))
    if signatures := findings.get('FileSignature'):
        max_findings.append(max(signatures, key=lambda _: int(_.status.value)))

    for finding in max_findings:
        file_finding_results.append(
            CommandResults(outputs_prefix=f'{CONTEXT_FINDING_PREFIX}.{finding.name}',
                           outputs=finding.to_context(include_hashes=False))
            # include_hashes is relevant for file-specific results, not for the aggregated maximal
        )
    return file_finding_results


def parse_command(context: dict) -> list[CommandResults]:
    return parse_context(context) + parse_files(context)


def main():
    try:
        context = demisto.callingContext.get('context', {}).get('ExecutionContext', {})
        return_results(parse_command(context))

    except Exception as e:
        demisto.error(traceback.format_exc())  # print the traceback
        return_error(f'Failed to execute Parse. Error: {str(e)}')


if __name__ in ('__main__', '__builtin__', 'builtins'):
    main()
