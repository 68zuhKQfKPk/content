import traceback
from enum import Enum, auto

import demistomock as demisto
from CommonServerPython import CommandResults, return_results, return_error


class Colors(Enum):
    RED = auto()
    WHITE = auto()
    GREEN = auto()


class Status(Enum):
    SUSPICIOUS = 'Suspicious'
    BENIGN = 'Benign'
    UNKNOWN = 'Unknown'


STATUS_TO_COLOR = {
    Status.SUSPICIOUS: Colors.RED,
    Status.BENIGN: Colors.GREEN,
    Status.UNKNOWN: Colors.WHITE
}

COLOR_TO_EMOJI = {
    Colors.RED: "ðŸ”´",
    Colors.WHITE: "âšª",
    Colors.GREEN: "ðŸŸ¢"
}


class Finding:
    question: str
    status: Status

    def __init__(self, context_finding: dict):
        self.name, values = next(iter(context_finding.items()))  # only one item in dict
        self.status = Status(values.get('Status', Status.UNKNOWN.value))

    def to_summary_line(self) -> dict:
        color: Colors = STATUS_TO_COLOR.get(self.status, Status.UNKNOWN)
        return {
            'Name': self.name,
            'Status': f'{COLOR_TO_EMOJI[color]} {self.status.value.title()}'
        }


def get_findings(malware_findings_context: tuple) -> tuple[Finding]:
    return tuple(Finding(value) for value in malware_findings_context)


def findings_to_table(findings: tuple[Finding]) -> CommandResults:
    return CommandResults(
        outputs=[finding.to_summary_line() for finding in findings],
        outputs_prefix='FindingsTable'
    )


def main():
    try:
        malware_context = demisto.callingContext \
            .get('context', {}).get('ExecutionContext', {}).get('MalwareFinding', ())
        return_results(findings_to_table(get_findings(malware_context)))
    except Exception as ex:
        demisto.error(traceback.format_exc())  # print the traceback
        return_error(f'Failed to execute FindingsToTable. Error: {str(ex)}')


if __name__ == '__main__':
    main()
