import traceback
from enum import Enum


class Status(Enum):
    SUSPICIOUS = 'Suspicious'
    BENIGN = 'Benign'
    UNKNOWN = 'Unknown'


STATUS_TO_COLOR = {
    Status.SUSPICIOUS: "ðŸ”´",
    Status.BENIGN: "ðŸŸ¢",
    Status.UNKNOWN: "âšª"
}


class Finding:
    question: str
    status: Status

    def __init__(self, name: str, value: dict):
        self.name = name
        self.question = value.get('Question', f'{self.name} (missing question value)')
        self.status = Status(value.get('Status', Status.UNKNOWN.value))

    def to_summary_line(self) -> dict:
        return {
            'Question': self.question,
            'Status': f'{STATUS_TO_COLOR[self.status]} {self.status.value.title()}'
        }


def get_findings(malware_findings_context: dict) -> List[Finding]:
    findings = []
    for name, value in malware_findings_context.items():
        if isinstance(value, list):  # when running the script for the second time, values are put in lists.
            value = value[-1]  # solves for one or multiple values
        findings.append(Finding(name, value))
    return findings


def findings_to_command_results(findings: List[Finding]) -> CommandResults:
    outputs = [finding.to_summary_line() for finding in findings]
    html = demisto.executeCommand("mdToHtml", {"text": outputs})
    if html:
        html = html[0].get('Contents', '')
    return CommandResults(
        outputs=outputs,
        raw_response=html,
        outputs_prefix='FindingsTable',
        content_format='html'
    )


def main():
    try:
        malware_context = demisto.callingContext \
            .get('context', {}).get('ExecutionContext', {}).get('MalwareFinding', {}).get('ContextFinding', {})
        return_results(findings_to_command_results(get_findings(malware_context)))
    except Exception as e:
        demisto.error(traceback.format_exc())  # print the traceback
        return_error(f'Failed to execute FindingsToTable. Error: {str(e)}')


if __name__ in ['__main__', '__builtin__', 'builtins']:
    main()
